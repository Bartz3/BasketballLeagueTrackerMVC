@using BasketballLeagueTracker.ViewModels;
@using System.Security.Claims;
@model Article
@{
    var commentVM = new CommentViewModel
            {
                ArticleId = Model.ArticleId,
            };
}
<style>
    .article-content {
        border: 1px solid #e2e2e2;
        padding: 15px;
        margin: 10px 0;
        border-radius: 5px;
        background-color: #fcfcfc;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .comment-section {
        padding: 10px 0;
    }

    .comment {
        position: relative;
        padding: 10px;
        margin-bottom: 10px;
        border-bottom: 1px solid #ccc;
    }

    .comment-actions {
        position: absolute;
        top: 5px;
        right: 5px;
    }

        .comment-actions .btn {
            margin-left: 5px;
        }

    .comment-info {
        font-weight: bold;
    }

    .comment-content {
        margin-top: 5px;
    }

    .title {
        text-align: center;
    }

    .comment-header {
        font-style: revert;
    }

    .login-alert {
        padding: 10px;
        margin-top: 10px;
        border: 1px solid #007bff;
        background-color: #f1f1f1;
        border-radius: 5px;
        text-align: center;
    }

        .login-alert a {
            color: #007bff;
            text-decoration: underline;
            font-weight: bold;
        }

</style>


<div class="article-content">
    <h2 class="title">@Model.Title</h2>
    @Html.Raw(Model.Content)
</div>

@{
    var localZone = TimeZoneConverter.TZConvert.GetTimeZoneInfo("Europe/Warsaw");
}
<div class="comment-section">
    <h3 class="comment-header">Komentarze</h3>

@{
    if (User.Identity.IsAuthenticated)
    {
        <partial name="_AddCommentPartial" model="commentVM" />
    }
    else
    {
        <div class="alert alert-info" role="alert">
            Aby dodać komentarz, <a href="/Identity/Account/Login" class="alert-link">zaloguj się</a>.
        </div>
    }
}
    @foreach (var comment in Model.Comments) //.OrderBy(x=>x.DateAdded)
    {
        var localDate = TimeZoneInfo.ConvertTimeFromUtc(comment.DateAdded, localZone);
        var isAuthorOrAdmin = User.Identity.IsAuthenticated && comment.User.Id == User.FindFirst(ClaimTypes.NameIdentifier)?.Value 
        || User.IsInRole(BasketballLeagueTracker.Utility.RoleNames.Role_Admin);
        <div class="comment">
            <div class="comment-actions">
                @if (isAuthorOrAdmin)
                {
                    <a class="btn btn-sm btn-primary edit-comment" data-comment-id="@comment.CommentId"><i class="bi bi-pencil-square"></i></a>
                    <a href="@Url.Action("DeletePOST", "Comment", new { commentId = comment.CommentId,articleId=Model.ArticleId })"
               class="btn btn-sm btn-danger delete-comment"><i class="bi bi-trash-fill"></i></a>
                }
            </div>
            <div class="comment-info">
                @comment.User?.GetDisplayName() napisał(a) @localDate.ToString("dd-MM-yyyy HH:mm")@if (comment.isEdited == true)
                {
                    <text> (edytowany)</text>
                }:
            </div>
            <div class="comment-content" contenteditable="false">
                <p>@comment.Content</p>
            </div>
            <div class="edit-comment-content" contenteditable="true" style="display: none;">
                <p>@comment.Content</p>
            </div>
            @if (isAuthorOrAdmin)
            {
                <button class="btn btn-primary save-comment" data-comment-id="@comment.CommentId" style="display: none;">Zapisz</button>
            }
        </div>
    }
</div>


<script src="~/lib/jquery/dist/jquery.js"></script>
<script>

    $(document).ready(function () {
        $(".edit-comment").click(function () {
            var commentContainer = $(this).closest(".comment");
            var commentContent = commentContainer.find(".comment-content p");
            var saveButton = commentContainer.find(".save-comment");
            var editButton = commentContainer.find(".edit-comment");
            var deleteButton = commentContainer.find(".delete-comment");

            // Orginal content
            var originalContent = commentContent.text();
            // New text area with old content inside
            var editTextArea = $("<textarea>").addClass("form-control").val(originalContent);
            commentContent.html(editTextArea);

            saveButton.show();
            deleteButton.hide();
            editButton.hide();
        });
    });

    $(".save-comment").click(function () {
        var commentContainer = $(this).closest(".comment");
        var commentContent = commentContainer.find(".comment-content p");
        var saveButton = commentContainer.find(".save-comment");
        var editButton = commentContainer.find(".edit-comment");
        var deleteButton = commentContainer.find(".delete-comment");
        var commentId = $(this).data("comment-id");


        var editedContent = commentContent.find("textarea").val();

        $.ajax({
            url: "/Comment/EditComment",
            type: "POST",
            data: {
                commentId: commentId,
                editedContent: editedContent
            },
            success: function (response) {
                if (response.success) {
                    commentContent.html("<p>" + editedContent + "</p>");
                    saveButton.hide();
                    editButton.show();
                    deleteButton.show();
                } else {
                    alert("Wystąpił błąd podczas aktualizacji komentarza.");
                }
            },
            error: function () {
                alert("Wystąpił błąd podczas komunikacji z serwerem.");
            }

        });
    });
</script>
